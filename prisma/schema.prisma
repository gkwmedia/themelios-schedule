// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

// Necessary for Next auth
// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id             String         @id @default(cuid())
  firstName      String?
  lastName       String?
  status         UserStatus     @default(USER)
  roles          Role[]
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  // accounts       Account[]
  // sessions       Session[]
  Organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?
  availability   Availability[]

  @@index([id, organizationId])
}

enum UserStatus {
  USER
  MANAGER
  ADMIN
}

model Availability {
  id     String @id @default(cuid())
  User   User   @relation(fields: [userId], references: [id])
  userId String
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model Organization {
  id           String      @id @default(uuid())
  name         String
  phone_number String?
  users        User[]
  locations    Locations[]
  events       Event[]

  @@index([id])
}

model Locations {
  id             String        @id @default(uuid())
  name           String
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  events         Event[]
}

model Role {
  id    String @id @default(uuid())
  name  String
  users User[]
}

model Event {
  id               String        @id @default(cuid())
  Organization     Organization? @relation(fields: [organizationId], references: [id])
  organizationId   String?
  datetime         DateTime
  Locations        Locations?    @relation(fields: [locationsId], references: [id])
  locationsId      String?
  positions        Json
  unavailableUsers Json?

  @@index([id, organizationId])
}
